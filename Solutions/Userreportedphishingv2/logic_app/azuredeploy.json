{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "PlaybookName": {
            "defaultValue": "PhishingAnalysisV3",
            "type": "string"
        },
        "FunctionAppRG":  {            
            "type":  "string"
        },
        "FunctionAppName":  {            
            "type":  "string"
        },
        "FunctionName01":  {            
            "type":  "string",
             "defaultValue": "parseemail"
        }
    },
    "variables": {
        "Office365-1ConnectionName": "[concat('Office365-1-', parameters('PlaybookName'))]",
        "Securitycopilot-1ConnectionName": "[concat('Securitycopilot-1-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                        "defaultValue": {},
                        "type": "Object"
                    }
                },
                "triggers": {
                    "When_a_new_email_arrives_(V3)": {
                        "splitOn": "@triggerBody()?['value']",
                        "type": "ApiConnectionNotification",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['office365-1']['connectionId']"
                                }
                            },
                            "fetch": {
                                "pathTemplate": {
                                    "template": "/v3/Mail/OnNewEmail"
                                },
                                "method": "get",
                                "queries": {
                                    "importance": "Any",
                                    "fetchOnlyWithAttachment": false,
                                    "includeAttachments": true,
                                    "folderPath": "Inbox"
                                }
                            },
                            "subscribe": {
                                "body": {
                                    "NotificationUrl": "@{listCallbackUrl()}"
                                },
                                "pathTemplate": {
                                    "template": "/GraphMailSubscriptionPoke/$subscriptions"
                                },
                                "method": "post",
                                "queries": {
                                    "importance": "Any",
                                    "fetchOnlyWithAttachment": false,
                                    "folderPath": "Inbox"
                                }
                            }
                        }
                    }
                },
                "actions": {
                    "AnalyzeSecurityData_Email_headers": {
                        "runAfter": {
                            "InitialPrompt": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                }
                            },
                            "method": "post",
                            "body": {
                                "PromptContent": "{\"input\": \"DKIM, SPF, and DMARC results\\:  @{body('Parse_JSON_1')?['email_content']?['dkim_result']} @{body('Parse_JSON_1')?['email_content']?['spf_result']} @{body('Parse_JSON_1')?['email_content']?['dmarc_result']} \\n \\n Email Return-Path \\: @{body('Parse_JSON_1')?['email_content']?['return_path']} Reply-To\\: @{body('Parse_JSON_1')?['email_content']?['reply_to']} From: @{body('Parse_JSON_1')?['email_content']?['sender']} \",\n \"question\": \"Analyze the email headers for signs of malicious intent such as return path matching the from address, DKIM, SPF, DMARC failures, message-id inconsistencies, check if the Reply-To address matches the From address. A different Reply-To address can be a sign of phishing, especially if it points to a free email service or a suspicious domain.\"}",
                                "SessionId": "@body('InitialPrompt')?['sessionId']",
                                "SkillName": "AnalyzeSecurityData"
                            },
                            "path": "/process-prompt"
                        }
                    },
                    "AnalyzeSecurityData_Email_intent": {
                        "runAfter": {
                            "Initialize_variable_email_body": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                }
                            },
                            "method": "post",
                            "body": {
                                "PromptContent": "{\n  \"input\": \"@{variables('email_body')}\",\n  \"question\": \"Analyze the intent of the email body for malicious intent. I'm specifically interested in a sense of urgency, generic greetings, spelling or grammar mistakes, requests for personal information, 'too good to be true', emotional manipulation, and otherwise unusual requests in the body parameter. Urging the user to click on a link or call a phone number when any of the above conditions are met indicates malicious intent. Random words that do not make sense throughout is a technique used to bypass email filters, signaling malicious intent. Note in the output if the email has been forwarded, the content should include the email body of all emails that may have been forwarded.\"\n}",
                                "SessionId": "@body('InitialPrompt')?['sessionId']",
                                "SkillName": "AnalyzeSecurityData"
                            },
                            "path": "/process-prompt"
                        }
                    },
                    "AskGPT_finalize_and_score": {
                        "runAfter": {
                            "AnalyzeSecurityData_Email_intent": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                }
                            },
                            "method": "post",
                            "body": {
                                "PromptContent": "/AskGpt Summarize our phishing email investigation with all the data from the previous steps collectively, to determine the legitimacy of the email. This includes the legitimacy of the headers (if performed), attachments, domains, email body intent, and ip addresses. Consider if domains are very closely spelled to real domains, indicating an attacker might be trying to fool the user. Decide if the email analyzed is legitimate, or if it is a phishing email. Provide a confidence score from 0-100 where 0 indicates the email is not likely a phishing email, and 100 is definitely a phishing email. You must provide a confidence score and evidence for your decision. The higher the number the more likely it is a phishing email.",
                                "SessionId": "@body('InitialPrompt')?['sessionId']"
                            },
                            "path": "/process-prompt"
                        }
                    },
                    "Check_if_IPs_exist": {
                        "actions": {
                            "GetReputationsForIndicators_ipaddresses": {
                                "type": "ApiConnection",
                                "inputs": {
                                    "host": {
                                        "connection": {
                                            "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                        }
                                    },
                                    "method": "post",
                                    "body": {
                                        "PromptContent": "{\"indicators\":\"Check the reputation for these IP addresses @{body('Parse_JSON_1')?['ip_addresses']}\"}",
                                        "SessionId": "@body('InitialPrompt')?['sessionId']",
                                        "SkillName": "GetReputationsForIndicators"
                                    },
                                    "path": "/process-prompt"
                                }
                            }
                        },
                        "runAfter": {
                            "Initialize_variable_ip_addresses": [
                                "Succeeded"
                            ]
                        },
                        "else": {
                        "actions": {}
                    },
                    "expression": {
                        "and": [
                            {
                                "greater": [
                                    "@length(body('Parse_JSON_1')?['ip_addresses'])",
                                    0
                                ]
                            }
                        ]
                    },
                    "type": "If"
                },
                "Check_if_attachments_exist": {
                    "actions": {
                        "Check_Attachment_Hash_GetFileAnalysis": {
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "PromptContent": "{\"hash\": \"@{body('Parse_JSON_1')?['email_content']?['attachments'][0]?['attachment_sha256']}\"}",
                                    "SessionId": "@body('InitialPrompt')?['sessionId']",
                                    "SkillName": "GetFileAnalysis"
                                },
                                "path": "/process-prompt"
                            }
                        }
                    },
                    "runAfter": {
                        "Initialize_variable_attachments": [
                            "Succeeded"
                        ]
                    },
                    "else": {
                    "actions": {}
                },
                "expression": {
                    "and": [
                        {
                            "greater": [
                                "@length(body('Parse_JSON_1')?['email_content']?['attachments'])",
                                0
                            ]
                        }
                    ]
                },
                "type": "If"
            },
            "Check_if_domains_exist": {
                "actions": {
                    "GetReputationsForIndicators_domains": {
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
                                }
                            },
                            "method": "post",
                            "body": {
                                "PromptContent": "{\"indicators\": \"Check the reputation of these domains @{body('Parse_JSON_1')?['domains']}\"}",
                                "SessionId": "@body('InitialPrompt')?['sessionId']",
                                "SkillName": "GetReputationsForIndicators"
                            },
                            "path": "/process-prompt"
                        }
                    }
                },
                "runAfter": {
                    "Initialize_variable_domains": [
                        "Succeeded"
                    ]
                },
                "else": {
                "actions": {}
            },
            "expression": {
                "and": [
                    {
                        "greater": [
                            "@length(body('Parse_JSON_1')?['domains'])",
                            0
                        ]
                    }
                ]
            },
            "type": "If"
        },
        "Export_email_(V2)": {
        "runAfter": {},
        "type": "ApiConnection",
        "inputs": {
            "host": {
                "connection": {
                    "name": "@parameters('$connections')['office365-1']['connectionId']"
                }
            },
            "method": "get",
            "path": "/codeless/beta/me/messages/@{encodeURIComponent(triggerBody()?['id'])}/$value"
        }
    },
    "For_each": {
        "foreach": "@triggerBody()?['attachments']",
        "actions": {
            "if_MSG_binary_attachment": {
                "actions": {
                    "Base64_ContentBytes_decode": {
                        "type": "Compose",
                        "inputs": "@base64ToBinary(items('For_each')?['contentBytes'])"
                    },
                    "Set_variable_raw_email_msg_binary_decoded": {
                        "runAfter": {
                            "Base64_ContentBytes_decode": [
                                "Succeeded"
                            ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                            "name": "raw_email",
                            "value": "@{outputs('Base64_ContentBytes_decode')}"
                        }
                    }
                },
                "else": {
                "actions": {}
            },
            "expression": {
                "or": [
                    {
                        "equals": [
                            "@item()?['contentType']",
                            "application/vnd.ms-outlook"
                        ]
                    },
                    {
                        "endsWith": [
                            "@item()?['name']",
                            ".eml"
                        ]
                    }
                ]
            },
            "type": "If"
        }
    },
    "runAfter": {
        "Initialize_and_set_variable_raw_email": [
            "Succeeded"
        ]
    },
    "type": "Foreach"
},
"InitialPrompt": {
    "runAfter": {
        "Parse_JSON_1": [
            "Succeeded"
        ]
    },
    "type": "ApiConnection",
    "inputs": {
        "host": {
            "connection": {
                "name": "@parameters('$connections')['securitycopilot-1']['connectionId']"
            }
        },
        "method": "post",
        "body": {
            "PromptContent": "/AskGpt This is an email investigation to determine if the email is malicious in nature. Acknowledge this prompt with \"OK, awaiting your input.\""
        },
        "path": "/process-prompt"
    }
},
"Initialize_and_set_variable_raw_email": {
    "runAfter": {
        "Export_email_(V2)": [
            "Succeeded"
        ]
    },
    "type": "InitializeVariable",
    "inputs": {
        "variables": [
            {
                "name": "raw_email",
                "type": "string",
                "value": "@{body('Export_email_(V2)')}"
            }
        ]
    }
},
"Initialize_variable_attachments": {
    "runAfter": {
        "AnalyzeSecurityData_Email_headers": [
            "Succeeded"
        ]
    },
    "type": "InitializeVariable",
    "inputs": {
        "variables": [
            {
                "name": "attachments",
                "type": "array",
                "value": [
                    "@body('Parse_JSON_1')?['email_content']?['attachments']"
                ]
            }
        ]
    }
},
"Initialize_variable_domains": {
    "runAfter": {
        "Check_if_IPs_exist": [
            "Succeeded"
        ]
    },
    "type": "InitializeVariable",
    "inputs": {
        "variables": [
            {
                "name": "domains",
                "type": "array",
                "value": [
                    "@body('Parse_JSON_1')?['domains']"
                ]
            }
        ]
    }
},
"Initialize_variable_ip_addresses": {
    "runAfter": {
        "Check_if_attachments_exist": [
            "Succeeded"
        ]
    },
    "type": "InitializeVariable",
    "inputs": {
        "variables": [
            {
                "name": "ip_addresses",
                "type": "array",
                "value": [
                    "@body('Parse_JSON_1')?['ip_addresses']"
                ]
            }
        ]
    }
},
"ParseRawEmail-parse_fwd_email": {
    "runAfter": {
        "For_each": [
            "Succeeded"
        ]
    },
    "type": "Function",
    "inputs": {
    "body": "@outputs('Base64_ContentBytes_decode')",
    "function": {
    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('FunctionAppRG'), '/providers/Microsoft.Web/sites/', parameters('FunctionAppName'), '/functions/', parameters('FunctionName01'))]"
     }
    }
},
"Parse_JSON": {
    "runAfter": {
        "AskGPT_finalize_and_score": [
            "Succeeded"
        ]
    },
    "type": "ParseJson",
    "inputs": {
        "content": "@{body('AskGPT_finalize_and_score')}",
        "schema": {
            "properties": {
                "Evaluation Result Content": {
                    "type": "string"
                },
                "Evaluation Result Type": {
                    "type": "string"
                },
                "Prompt Content": {
                    "type": "string"
                },
                "SessionId": {
                    "type": "string"
                },
                "Skill Name": {
                    "type": "string"
                },
                "Skill Sources": {
                    "type": "array"
                }
            },
            "type": "object"
        }
    }
},
"Parse_JSON_1": {
    "runAfter": {
        "ParseRawEmail-parse_fwd_email": [
            "Succeeded"
        ]
    },
    "type": "ParseJson",
    "inputs": {
        "content": "@body('ParseRawEmail-parse_fwd_email')",
        "schema": {
            "type": "object",
            "properties": {
                "email_content": {
                    "type": "object",
                    "properties": {
                        "sender": {
                            "type": "string"
                        },
                        "return_path": {
                            "type": "string"
                        },
                        "receiver": {
                            "type": "string"
                        },
                        "reply_to": {
                            "type": "string"
                        },
                        "subject": {
                            "type": "string"
                        },
                        "date": {
                            "type": "string"
                        },
                        "smtp": {
                            "type": "object",
                            "properties": {
                                "delivered_to": {
                                    "type": "string"
                                },
                                "received": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "dkim_result": {
                            "type": "string"
                        },
                        "spf_result": {
                            "type": "string"
                        },
                        "dmarc_result": {
                            "type": "string"
                        },
                        "body": {
                            "type": "string"
                        },
                        "attachments": {
                            "type": "array"
                        }
                    }
                },
                "ip_addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "urls": {
                    "type": "array"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
},
"Initialize_variable_email_body": {
    "runAfter": {
        "Check_if_domains_exist": [
            "Succeeded"
        ]
    },
    "type": "InitializeVariable",
    "inputs": {
        "variables": [
            {
                "name": "email_body",
                "type": "string",
                "value": "@body('Parse_JSON_1')?['email_content']?['body']"
            }
        ]
    }
}
},
"outputs": {}
},
"parameters": {
"$connections": {
"value": {
"office365-1": {
    "connectionId": "[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
    "connectionName": "[variables('Office365-1ConnectionName')]",
    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
},
"securitycopilot-1": {
    "connectionId": "[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]",
    "connectionName": "[variables('Securitycopilot-1ConnectionName')]",
    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
}
}
}
}
},
"name": "[parameters('PlaybookName')]",
"type": "Microsoft.Logic/workflows",
"location": "[resourceGroup().location]",
"apiVersion": "2017-07-01",
"dependsOn": [
"[resourceId('Microsoft.Web/connections', variables('Office365-1ConnectionName'))]",
"[resourceId('Microsoft.Web/connections', variables('Securitycopilot-1ConnectionName'))]"
]
},
{
"type": "Microsoft.Web/connections",
"apiVersion": "2016-06-01",
"name": "[variables('Office365-1ConnectionName')]",
"location": "[resourceGroup().location]",
"kind": "V1",
"properties": {
"displayName": "[variables('Office365-1ConnectionName')]",
"customParameterValues": {},
"api": {
"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Office365')]"
}
}
},
{
"type": "Microsoft.Web/connections",
"apiVersion": "2016-06-01",
"name": "[variables('Securitycopilot-1ConnectionName')]",
"location": "[resourceGroup().location]",
"kind": "V1",
"properties": {
"displayName": "[variables('Securitycopilot-1ConnectionName')]",
"customParameterValues": {},
"api": {
"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Securitycopilot')]"
}
}
}
]
}
